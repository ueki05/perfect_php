<h1>6.4 さらなる役割の分割</h1>
<h2>6.4.1 役割の分割共通化</h2>
<p>ロジックとビューを分割することで可読性の向上など様々なメリットにつながる。</p>
<p>しかし、特に画面数が増えてくるとこれらを単純に分離しただけでは解決されない問題がある。</p>

<h3>重複を避ける</h3>
<p>特に規模が大きくなるにつれ、処理の重複は保守性の低下など大きな問題につながる。</p>
<p>重複を防ぐための考え方として<strong>DRY(Don't repeat yourseld)原則</strong>がある。</p>
<p>重複箇所を抜き出していくことで再利用性の向上に繋がる。</p>

<h3>オブジェクト指向</h3>
<p>役割にあわせてクラスを分割し、それらを必要にあわせて扱うことで、メンテナンス性の向上などにつながる。</p>
<p>重複を避けていくためには役割にあわせた処理の分割が必要になってくるが、オブジェクト指向はそういった目的にはとても適している。</p>

